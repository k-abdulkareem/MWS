// <auto-generated />
using System;
using MWS_SocialNetwork.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MWS_SocialNetwork.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20191011193727_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Gender");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path");

                    b.Property<int>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.ConflictResolutionPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("PolicyCode");

                    b.HasKey("Id");

                    b.ToTable("ConflictResolutionPolicies");

                    b.HasData(
                        new { Id = 1, Active = true, Description = "Sum of decisions must equal to controllers count", PolicyCode = "All" },
                        new { Id = 2, Active = false, Description = "It's enough to get at least one approval , so Sum of decisions must be Larger or equal to 1", PolicyCode = "One" },
                        new { Id = 3, Active = false, Description = "It's required to get the majority of approvals, so Sum of decisions must be larger or equalt to half of controllers count", PolicyCode = "Majority" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Name = "Not Specified" },
                        new { Id = 2, Name = "Syria" },
                        new { Id = 3, Name = "Lebanon" },
                        new { Id = 4, Name = "France" },
                        new { Id = 5, Name = "Egypt" },
                        new { Id = 6, Name = "Germany" },
                        new { Id = 7, Name = "Denmark" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.DisallowedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisallowedUserId");

                    b.Property<int>("PrivacySettingId");

                    b.HasKey("Id");

                    b.HasIndex("DisallowedUserId");

                    b.HasIndex("PrivacySettingId");

                    b.ToTable("DisallowedEntities");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.DisallowedPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisallowedUserId");

                    b.Property<int>("PermissionId");

                    b.HasKey("Id");

                    b.HasIndex("DisallowedUserId");

                    b.HasIndex("PermissionId");

                    b.ToTable("DisallowedPermissions");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<int>("EducationDegreeId");

                    b.Property<DateTime?>("GraduateAt");

                    b.Property<string>("SchoolOrUniversity");

                    b.Property<DateTime?>("StartAt");

                    b.Property<string>("StudyTitle");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EducationDegreeId");

                    b.HasIndex("UserId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.EducationDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EducationDegrees");

                    b.HasData(
                        new { Id = 1, Name = "Not Specified" },
                        new { Id = 2, Name = "High School" },
                        new { Id = 3, Name = "Bachelor" },
                        new { Id = 4, Name = "Master" },
                        new { Id = 5, Name = "Ph.D." }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("EntityTypes");

                    b.HasData(
                        new { Id = 1, Title = "User" },
                        new { Id = 2, Title = "Group" },
                        new { Id = 3, Title = "Relationship" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Group", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("GroupName");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupId");

                    b.Property<DateTime>("Since");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique()
                        .HasFilter("[GroupId] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InteractionType");

                    b.Property<int>("PostId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromUserId");

                    b.Property<bool>("IsSeen");

                    b.Property<DateTime>("NotificationDate");

                    b.Property<int>("NotificationTypeId");

                    b.Property<string>("Parameter");

                    b.Property<string>("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Code");

                    b.Property<string>("Controller");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new { Id = 1, Action = "", Code = "AddRelationship", Controller = "" },
                        new { Id = 2, Action = "", Code = "ChangeConflictPolicy", Controller = "" },
                        new { Id = 3, Action = "Index", Code = "ChangeRelationship", Controller = "UserProfile" },
                        new { Id = 4, Action = "Index", Code = "GroupInvitation", Controller = "GroupProfile" },
                        new { Id = 5, Action = "Index", Code = "Tag", Controller = "MyPosts" },
                        new { Id = 6, Action = "Index", Code = "Contribute", Controller = "MyPosts" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionTypeId");

                    b.Property<string>("RelationshipTypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("RelationshipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("PermissionTypes");

                    b.HasData(
                        new { Id = 1, Title = "Contributing" },
                        new { Id = 2, Title = "Tagging" },
                        new { Id = 3, Title = "Sharing" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("PublishDate");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.PrivacySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SocialEntityId");

                    b.Property<int>("U2PRelationshipId");

                    b.HasKey("Id");

                    b.HasIndex("SocialEntityId");

                    b.HasIndex("U2PRelationshipId");

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.RelationshipType", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("Order");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("RelationshipTypes");

                    b.HasData(
                        new { Id = "191c5f8d-141b-46ee-b024-604281936a72", Order = 1, Title = "Family" },
                        new { Id = "be68e446-e31f-463c-8176-31e0d3efc7ef", Order = 2, Title = "Friend" },
                        new { Id = "faf04a8d-350a-4153-8afe-bbbd0bcf7410", Order = 3, Title = "Colleague" },
                        new { Id = "07d39285-1d5c-4149-9964-9682d44063b7", Order = 4, Title = "Coworker" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.SocialEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EntityTypeId");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("SocialEntities");

                    b.HasData(
                        new { Id = "191c5f8d-141b-46ee-b024-604281936a72", EntityTypeId = 3 },
                        new { Id = "be68e446-e31f-463c-8176-31e0d3efc7ef", EntityTypeId = 3 },
                        new { Id = "faf04a8d-350a-4153-8afe-bbbd0bcf7410", EntityTypeId = 3 },
                        new { Id = "07d39285-1d5c-4149-9964-9682d44063b7", EntityTypeId = 3 }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.U2PRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PostId");

                    b.Property<int>("U2PRelationshipTypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("U2PRelationshipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("U2PRelationships");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.U2PRelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("U2PRelationshipTypes");

                    b.HasData(
                        new { Id = 1, Caption = "My own Post", Title = "Owner" },
                        new { Id = 2, Caption = "Post that I Add to others", Title = "Contributor" },
                        new { Id = 3, Caption = "Post that I am tagged in", Title = "Tagged" },
                        new { Id = 4, Caption = "Post that I share", Title = "Shareholder" }
                    );
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.U2URelationship", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("RelationshipTypeId");

                    b.Property<string>("UserId");

                    b.HasKey("id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RelationshipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("U2URelationships");
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<int>("CountryId");

                    b.Property<string>("JobTitle");

                    b.Property<DateTime?>("Sicne");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.ApplicationUser", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.SocialEntity", "SocialEntity")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("MWS_SocialNetwork.Models.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Attachment", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.DisallowedEntity", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "DisallowedUser")
                        .WithMany()
                        .HasForeignKey("DisallowedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.PrivacySetting", "PrivacySetting")
                        .WithMany()
                        .HasForeignKey("PrivacySettingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.DisallowedPermission", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "DisallowedUser")
                        .WithMany()
                        .HasForeignKey("DisallowedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Education", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.EducationDegree", "EducationDegree")
                        .WithMany()
                        .HasForeignKey("EducationDegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Group", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.SocialEntity", "SocialEntity")
                        .WithOne("Group")
                        .HasForeignKey("MWS_SocialNetwork.Models.Group", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.GroupMember", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Interaction", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Notification", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Permission", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.PermissionType", "PermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.RelationshipType", "RelationshipType")
                        .WithMany()
                        .HasForeignKey("RelationshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.PrivacySetting", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.SocialEntity", "SocialEntity")
                        .WithMany()
                        .HasForeignKey("SocialEntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.U2PRelationship", "U2PRelationship")
                        .WithMany()
                        .HasForeignKey("U2PRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.RelationshipType", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.SocialEntity", "SocialEntity")
                        .WithOne("RelationshipType")
                        .HasForeignKey("MWS_SocialNetwork.Models.RelationshipType", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.SocialEntity", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.U2PRelationship", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.U2PRelationshipType", "U2PRelationshipType")
                        .WithMany()
                        .HasForeignKey("U2PRelationshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.U2URelationship", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.RelationshipType", "RelationshipType")
                        .WithMany()
                        .HasForeignKey("RelationshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MWS_SocialNetwork.Models.Work", b =>
                {
                    b.HasOne("MWS_SocialNetwork.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MWS_SocialNetwork.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
